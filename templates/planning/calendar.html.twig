{% extends 'base.html.twig' %}

{% block title %}Planning par groupe{% endblock %}

{% block stylesheets %}
  <link href="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.css" rel="stylesheet">
{% endblock %}

{% block body %}
  <h1>Planning par groupe</h1>

  <div style="margin-bottom: 20px;">
    <label for="groupe-select">Choisir un groupe :</label>
    <select id="groupe-select">
      {% for groupe in groupes %}
        <option value="{{ groupe.id }}">{{ groupe.nom }}</option>
      {% endfor %}
    </select>

    <button id="generate-button" style="margin-left: 15px;">🔄 Générer planning auto</button>
    <button id="btn-valider-planning" style="margin-left: 15px;">✅ Valider le planning</button>
  </div>

  <div id="calendar" style="margin-top: 30px;"></div>

  <div id="ajout-container" style="display:none; margin-top:20px; background:#f9f9f9; padding:10px; border:1px solid #ccc;">
    <label for="select-employe">Ajouter un employé :</label>
    <select id="select-employe"></select>

    <label for="input-debut" style="margin-left: 10px;">Heure début :</label>
    <input type="time" id="input-debut" value="06:45">

    <label for="input-fin" style="margin-left: 10px;">Heure fin :</label>
    <input type="time" id="input-fin" value="14:00">

    <button id="btn-ajouter-employe" style="margin-left: 10px;">✅ Ajouter</button>
  </div>
{% endblock %}

{% block javascripts %}
  <script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function () {
      const calendarEl = document.getElementById('calendar');
      const selectGroupe = document.getElementById('groupe-select');
      const generateButton = document.getElementById('generate-button');
      const selectEmploye = document.getElementById('select-employe');
      const inputDebut = document.getElementById('input-debut');
      const inputFin = document.getElementById('input-fin');
      const btnAjouter = document.getElementById('btn-ajouter-employe');
      const ajoutContainer = document.getElementById('ajout-container');
      const btnValiderPlanning = document.getElementById('btn-valider-planning');

      let currentDate = null;
      let currentEmployes = [];

      const calendar = new FullCalendar.Calendar(calendarEl, {
        initialView: 'timeGridWeek',
        nowIndicator: true,
        locale: 'fr',
        slotMinTime: '06:45:00',
        slotMaxTime: '22:00:00',
        selectable: true,
        slotLabelFormat: { hour: '2-digit', minute: '2-digit', hour12: false },
        eventTimeFormat: { hour: '2-digit', minute: '2-digit', hour12: false },

        events: function (info, successCallback, failureCallback) {
          const groupeId = selectGroupe.value;
          fetch('/planning/events?groupe=' + groupeId)
            .then(response => response.json())
            .then(successCallback)
            .catch(failureCallback);
        },

        select: function (info) {
          const groupeId = selectGroupe.value;
          if (!groupeId) return;

          currentDate = info.startStr.split('T')[0];

          fetch('/planning/available', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              start: info.startStr,
              end: info.endStr,
              groupe: groupeId
            })
          })
          .then(res => res.json())
          .then(employes => {
            currentEmployes = employes;
            if (employes.length === 0) {
              alert("Aucun employé disponible.");
              return;
            }

            selectEmploye.innerHTML = "";
            employes.forEach(e => {
              const opt = document.createElement('option');
              opt.value = e.id;
              opt.text = `${e.prenom} ${e.nom}`;
              selectEmploye.appendChild(opt);
            });

            ajoutContainer.style.display = "block";
          });
        },

        eventClick: function (info) {
          if (confirm("Supprimer ce créneau ?")) {
            fetch('/planning/delete', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ id: info.event.id })
            }).then(() => info.event.remove());
          }
        },

        eventDrop: function (info) {
          updateEvent(info.event);
        },

        eventResize: function (info) {
          updateEvent(info.event);
        }
      });

      calendar.render();

      selectGroupe.addEventListener('change', () => calendar.refetchEvents());

      generateButton.addEventListener('click', function () {
        generateButton.disabled = true;
        generateButton.innerText = "⏳ Génération...";

        fetch('/planning/setup')
          .then(() => {
            generateButton.disabled = false;
            generateButton.innerText = "✅ Planning généré";
            calendar.refetchEvents();
            setTimeout(() => generateButton.innerText = "🔄 Générer planning auto", 2000);
          })
          .catch(() => {
            alert("Erreur de génération.");
            generateButton.disabled = false;
            generateButton.innerText = "🔄 Générer planning auto";
          });
      });

      btnAjouter.addEventListener('click', function () {
        const selectedId = selectEmploye.value;
        const selected = currentEmployes.find(e => e.id == selectedId);
        const groupeId = selectGroupe.value;
        const start = inputDebut.value;
        const end = inputFin.value;

        if (!start || !end) {
          alert("Veuillez indiquer une heure de début et de fin.");
          return;
        }

        fetch('/planning/add-ajax', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            nom: selected.nom,
            prenom: selected.prenom,
            date: currentDate,
            start: start,
            end: end,
            groupe: groupeId
          })
        }).then(res => res.json()).then(data => {
          if (data.success) {
            calendar.refetchEvents();
            calendar.gotoDate(currentDate);
            ajoutContainer.style.display = "none";
          } else {
            alert(data.message || "Erreur lors de l’ajout.");
          }
        });
      });

      btnValiderPlanning.addEventListener('click', function () {
        const groupeId = selectGroupe.value;
        if (!groupeId) {
          alert("Veuillez sélectionner un groupe.");
          return;
        }

        if (!confirm("Voulez-vous valider le planning pour ce groupe ?")) {
          return;
        }

        fetch('/planning/' + groupeId + '/valider-groupe', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' }
        })
        .then(res => res.json())
        .then(data => {
          alert(data.message);
          calendar.refetchEvents();
        })
        .catch(() => alert("Erreur lors de la validation."));
      });

      function updateEvent(event) {
        fetch('/planning/update', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            id: event.id,
            start: event.start.toISOString(),
            end: event.end.toISOString()
          })
        })
        .then(res => res.json())
        .then(data => {
          if (data.status !== 'ok') {
            alert("Erreur de mise à jour.");
            calendar.refetchEvents();
          }
        });
      }
    });
  </script>
{% endblock %}
